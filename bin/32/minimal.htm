<html abc="def">
  <head>
    <title></title>
    <style>
    
    html {
      background: radial-gradient(75% 75%, circle farthest-side, white, orange, rgb(0,0,204));
      //background: #f00;
      color:#fff;
    }
    
    html:rtl {
      mapping: left-to-right(background);
    }
    
    
    //body { 
    //  size:*;
    //  overflow:auto; 
    //}
    
    </style>
    <script type="text/tiscript">

        var title = self.$(head > head);
        //import {foo,zoo,con} from "module.tis";
        //import * as bar from "module.tis";
        //import bar from "module.tis";
        debug log: title;

        //var {A:a,B:b,C:c} = {A:1,B:2,C:3};    

        /*void function() {
          debug log: 1;
        }();    

        function self.ready() {
          //debug log: foo(), zoo(), bar, con;
          var arr = [];
          debug log: arr.first === void(0), arr.first == undefined;
        }
        */
/*
        function self.ready() {
          var obj = {a:1,b:2,c:3}; 
          var {a:foo,b:bar,c:zap,c:zoo = 4} = obj;
          debug log: foo,bar,zap,zoo;
        }*/

        /*
        function* genNumbers(n) { // generates consecutive numbers [0..n)
          for(var i in n)
            yield i;
        }

        function self.ready() {

          //const sx5 = [...genNumbers(5)];
          //assert sx5 == [0,1,2,3,4];          

          const sx1 = [1,2,3];
          const sx2 = [test1: ..genNumbers(5)];          
          debug log: sx2;

        }*/

      /*function self.ready() {
        var [,,c] = [1,2,3];
        debug log: c;
      }*/

      /*function self.ready() {
        const lam = foo => foo + 2;
        //assert lam(40) == 42;
        debug log: lam(40);

        var a = {a:1,b:2,c:3}; 
        debug log: a;
      }*/

      /*function self.ready() {
        //var transformed = [12, 5, 8, 130, 44].map(:el{ if(el > 10) return el-10 } )
        //var transformed = [12, 5, 8, 130, 44].map(function(el){ if(el > 10) return el-10 } );
        //debug log: transformed;
        const lam = () => { return this; }
        assert lam() === self;
      }*/
 

      /*function self.ready() {
        var fun = self << event click {
          debug log: this function;
          self >> fun;
        };
        debug log: fun;
      }*/


      /*function self.ready() {
        const foo = (a, ...args) => { debug args: a, args; }
        const bar = (a = 0, b = 1) => { debug args: a, b; }

        var obj = { foo:foo; }

        var a = [0,1,2,3];
        var b = [4,5];

        foo(-1,...a,...b);
        bar();
        
      }*/

    /*namespace My { 

      class Base : Object {
        function this(p) {
          this.a = p;
        }
        function foo(p) {
          this.a += p;
        }

      }
      class Derived : Base {
        this var z = "zzz";

        function this(p) {
          super(p);
          //this.a = p;
        }
        function foo(p) {
          super.foo(p + 1);
        }

        property bar(v) {
          get return this.v;
          set this.v = v;
        }

      }
    }

    function self.ready() {
      
      var obj = new My.Derived(40);
      obj.foo(1);
      obj.bar = 42;
      debug log: obj, obj.a, obj.bar, obj#a;
      debug log: obj.z;
    }*/

      /*function self.ready() {
        
        var obj = {
          foo: function (obj) { return obj; }
        }

        var t = obj.foo { a:1,b:2 };

        debug log: t;
      }*/    

      /*function self.ready() {
        const obj = {
          a: 1 2 3 4; 
        };
        debug log: obj.a;
      }*/

      /*function self.ready() {
        $(body).text = String.printf("%d.%d.%d.%d", 
          (Sciter.VERSION >> 16) & 0xffff, Sciter.VERSION & 0xffff,
          (Sciter.REVISION >> 16) & 0xffff, Sciter.REVISION & 0xffff);
      }*/

      /*function self.ready() {
        var {a, ...b} = {a:1,b:2,c:3};
        debug log: a, b;
      }*/      

      /*function self.ready() {
        var [a, ...b] = [0,1,2,3];
        debug log: a, b;
        var c = [1,2];
        var d = [4,5];
        var e = [0,...c,3,...d];
        debug log: e;
      }*/

      /*event click {
         debug log: "click"; 
      }*/


      /*function self.ready() {

        var obj = {};

        obj.func = function(a,b) { return a + b; }
        debug log: obj.func, obj.func(1,2);
      }*/


/*      event keydown (evt) {
        if( evt.keyCode == Event.VK_F5 ) {
          view.load( view.root.url() ); // reload it
        }
      }
      
      function self.ready() {
        //var w = self.intrinsicWidthMax();
        //var h = self.intrinsicHeight(w);
        //view.move(100,100,w,h,true);
        self.post(::view.connectToInspector()); // connect to inspector 
      }*/

      //var a = 1; 
      //a++;
      //debug log: a;

      /*function foo() {
        var a = [1,2,3]; // pending posts awaiting delivery
        //var resources = {};
        return a[1];
      }

      function self.ready() {
        var [a,b,c=3] = [1,2]; 
        ////++a;
        debug log: a,b,c;
        //debug log: foo();
        //debug log: a;
      }*/

      /*function self.ready() {
        var {a,b,c} = {a:1,b:2,c:3}; 
        ////++a;
        debug log: a, b, c;
        //debug log: a.a,a.b,a.c;
        //debug log: foo();
        //debug log: a;
      }*/     

      /*function self.ready() {
        var a,b,c; 
        ({a,b,c,d=4} = {a:1,b:2,c:3}); 
        ////++a;
        debug log: a, b, c, d;
        //debug log: a.a,a.b,a.c;
        //debug log: foo();
        //debug log: a;
      }*/


      //stdout.println(a);
    
    </script>
  </head>
<body>

<h1>Minimal Sciter Application</h1>
<!--    <p>Running on <em #machine /> machine</p>
  
  <button #append>Append</button> 
  <button #open>Open</button> 
  <select>
    <option>First</option>
    <option>Second</option>
    <option>Third</option>
  </select> -->
  
  <input|text #first novalue="{text}">
  <input|password #second novalue="{password}">
  
  <p>test of generated image: <img src="in-memory:test"> </p>
  <p>Connects to inspector automatically, so inspector should be running.</p>
  <p>Press F5 to reload the document in window.</p>


</body>
</html>
